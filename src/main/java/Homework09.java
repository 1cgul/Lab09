/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */

/**
 *
 * @author MoaathAlrajab
 */
public class Homework09 {
    
    // ToDo 01:  Write an algorithm to solve the following problem
    /*
    The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over one hundred divisors?
    
    */
    public static void main(String[] args){
        int target = 100;
        System.out.print("First triangle number with " + target + " divisors is: " + lowestTriangleNumber(100));
        //output should be "First triangle number with 100 divisors is: 73920"
    }

    public static int lowestTriangleNumber(int target){  //finds the lowest triangle number with target divisors
        int triangleNumber = 0; //will be returned
        int increment = 1;
        int divisorCount = 0; //will count number of divisors

        while(true){
            triangleNumber+=increment;
            divisorCount = 0; //reset divisor count on each loop

            for (int i = 1; i <= Math.sqrt(triangleNumber); i++){
                if(triangleNumber % i == 0){
                    divisorCount+=2;
                    if(i*i == triangleNumber){ //checks if number is square root, if it is, decrement
                        divisorCount--;
                    }
                }
            }
            if(divisorCount>=target){
                return triangleNumber;
            }
            increment++;
        }
    }
    
}
